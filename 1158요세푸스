//1번부터 N번까지 N명의 사람이 원을 이루면서 앉아있고, 양의 정수 K(≤ N)가 주어진다. 이제 순서대로 K번째 사람을 제거한다.
//한 사람이 제거되면 남은 사람들로 이루어진 원을 따라 이 과정을 계속해 나간다. 이 과정은 N명의 사람이 모두 제거될 때까지 계속된다.
//원에서 사람들이 제거되는 순서를 (N, K)-요세푸스 순열
//N과 K가 주어지면 (N, K)-요세푸스 순열을 구하는 프로그램을 작성하시오.
//첫째 줄에 N과 K가 빈 칸을 사이에 두고 순서대로 주어진다. (1 ≤ K ≤ N ≤ 5,000)
//요세푸스 순열을 출력한다.
package BaekJoon200;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.io.BufferedWriter;
import java.io.OutputStreamWriter;
import java.util.StringTokenizer;
import java.util.LinkedList;
import java.util.Queue;

public class Josephus {
    public static void main(String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer input = new StringTokenizer(br.readLine());
        StringBuilder output = new StringBuilder();
        output.append("<");

        int N = Integer.parseInt(input.nextToken());
        int K = Integer.parseInt(input.nextToken());

        Queue<Integer> queue = new LinkedList<>();
        for(int i = 0; i<N; i++){ // 큐에 1부터 N까지 채우기
            queue.offer(i+1);
        }

        while(queue.size() > 1){ //큐의 사이즈가 1일이기 전까지 반복(마지막 남은 한 숫자는 수행할 이유가 없기때문)
            for(int i =0; i<K-1;i++) { //k-1까지 숫자를 빼서 다시 넣기(큐의 맨 뒤로 순서대로 보내기)
                int num = queue.poll();
                queue.offer(num);
            }
            output.append(queue.poll()).append(", ");
        }
        output.append(queue.poll()).append(">");
        bw.write(output+"\n");
        bw.flush();   //남아있는 데이터를 모두 출력시킴
        bw.close();
    }
}
