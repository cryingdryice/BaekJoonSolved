//L	커서를 왼쪽으로 한 칸 옮김 (커서가 문장의 맨 앞이면 무시됨)
//D	커서를 오른쪽으로 한 칸 옮김 (커서가 문장의 맨 뒤이면 무시됨)
//B	커서 왼쪽에 있는 문자를 삭제함 (커서가 문장의 맨 앞이면 무시됨)삭제로 인해 커서는 한 칸 왼쪽으로 이동한 것처럼 나타나지만, 실제로 커서의 오른쪽에 있던 문자는 그대로임
//P $	$라는 문자를 커서 왼쪽에 추가함
//초기에 편집기에 입력되어 있는 문자열이 주어지고, 그 이후 입력한 명령어가 차례로 주어졌을 때,
//        모든 명령어를 수행하고 난 후 편집기에 입력되어 있는 문자열을 구하는 프로그램을 작성하시오.
//명령어가 수행되기 전에 커서는 문장의 맨 뒤에 위치하고 있다고 한다.
//첫째 줄에는 초기에 편집기에 입력되어 있는 문자열이 주어진다. 이 문자열은 길이가 N이고, 영어 소문자로만 이루어져 있으며, 길이는 100,000을 넘지 않는다.
//둘째 줄에는 입력할 명령어의 개수를 나타내는 정수 M(1 ≤ M ≤ 500,000)
//셋째 줄부터 M개의 줄에 걸쳐 입력할 명령어가 순서대로 주어진다. 명령어는 위의 네 가지 중 하나의 형태로만 주어진다.
//첫째 줄에 모든 명령어를 수행하고 난 후 편집기에 입력되어 있는 문자열을 출력한다.

package BaekJoon200;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.io.BufferedWriter;
import java.io.OutputStreamWriter;
import java.util.Stack;

public class Editor {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        String input = br.readLine();
        int M = Integer.parseInt(br.readLine());
        StringBuffer output = new StringBuffer(); // 결과담을 문자열

        Stack curL = new Stack<>(); // 커서 왼쪽부분의 문자열 스택
        Stack curR = new Stack<>(); // 커서 오른쪽부분의 문자열 스택

        for (int i = 0; i < input.length(); i++) { // 입력받은 문자열의 curL스택에 넣기
            curL.push(input.charAt(i));
        }

        for(int i = 0; i < M; i++) {
            String editkey = br.readLine();
            switch (editkey) {
                case "L":
                    if(!curL.empty()){ // 왼쪽스택이 비어있지 않으면 curL의 top을 curR로 pop
                        curR.push(curL.pop());
                    }
                    break;
                case "D":
                    if(!curR.empty()){ // 오른쪽스택이 비어있지 않으면 curR의 top을 curL로 pop
                        curL.push(curR.pop());
                    }
                    break;
                case "B": // 왼쪽스택이 비어있지 않으면 curL top제거(pop)
                    if(!curL.empty()){
                        curL.pop();
                    }
                    break;
                default:
                    String[] words = editkey.split(" ");
                    curL.push(words[1]);
                    break;
            }
        }
        while (!curL.empty()) { // 모든 왼쪽스택의 문자를 curR스택에 넣기(결과를 출력하기 위해 하나의 스택에 문자들을 다 넣기 위함)
            curR.push(curL.pop());
        }

        while (!curR.empty()) { // curR의 문자를 output에 연결
            output.append(curR.pop());
        }
        bw.write(output+"\n");
        bw.flush();
        bw.close();
    }
}
