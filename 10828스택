//push X: 정수 X를 스택에 넣는 연산이다.
//pop: 스택에서 가장 위에 있는 정수를 빼고, 그 수를 출력한다. 만약 스택에 들어있는 정수가 없는 경우에는 -1을 출력한다.
//size: 스택에 들어있는 정수의 개수를 출력한다.
//empty: 스택이 비어있으면 1, 아니면 0을 출력한다.
//top: 스택의 가장 위에 있는 정수를 출력한다. 만약 스택에 들어있는 정수가 없는 경우에는 -1을 출력한다.

//첫째 줄에 주어지는 명령의 수 N (1 ≤ N ≤ 10,000)이 주어진다. 둘째 줄부터 N개의 줄에는 명령이 하나씩 주어진다. 주어지는 정수는 1보다 크거나 같고, 100,000보다 작거나 같다.
//출력해야하는 명령이 주어질 때마다, 한 줄에 하나씩 출력한다.

package BaekJoon200;
import java.util.Scanner;

public class Stack {
    static int[] stack;
    static int size =0;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        StringBuffer output = new StringBuffer();

        int N = scanner.nextInt();
        stack = new int[N];

        for(int i = 0; i < N; i++) {
            String input = scanner.next();
            switch (input) {
                case "push":
                    push(scanner.nextInt());
                    break;
                case "pop":
                    output.append(pop()).append('\n');
                    break;
                case "size":
                    output.append(size()).append('\n');
                    break;
                case "empty":
                    output.append(empty()).append('\n');
                    break;
                case "top":
                    output.append(top()).append('\n');
                    break;
            }
        }
        System.out.println(output);
    }
    public static void push(int input) {
        stack[size] = input;
        size++;
    }
    public static int pop() {
        if(size == 0) {return -1;}
        else {
            int topNum = stack[size - 1];
            stack[size - 1] = 0;
            size--;
            return topNum;
        }
    }
    public static int size() {return size;}
    public static int empty() {
        if(size == 0) {return 1;}
        else {return 0;}
    }
    public static int top() {
        if(size == 0) {return -1;}
        else {return stack[size - 1];}
    }
}

