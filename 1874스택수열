//스택에 push하는 순서는 반드시 오름차순을 지키도록 한다고 하자.
//임의의 수열이 주어졌을 때 스택을 이용해 그 수열을 만들 수 있는지 없는지, 있다면 어떤 순서로 push와 pop 연산을 수행해야 하는지를 알아낼 수 있다.
//첫 줄에 n (1 ≤ n ≤ 100,000)이 주어진다. 둘째 줄부터 n개의 줄에는 수열을 이루는 1이상 n이하의 정수가 하나씩 순서대로 주어진다.
//입력된 수열을 만들기 위해 필요한 연산을 한 줄에 한 개씩 출력한다. push연산은 +로, pop 연산은 -로 표현하도록 한다. 불가능한 경우 NO를 출력한다.

package BaekJoon200;
import java.util.Scanner;

public class StackArray {
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        StringBuffer output = new StringBuffer();	// 출력 배열

        int N = scanner.nextInt();
        int[] stack = new int[N];

        int index = 0; // push나 pop할 스택의 인덱스
        int start = 0;
        boolean setOutput = true;

        for(int i = 0; i<N; i++){
            int num = scanner.nextInt();

            if(num > start){
                for(int j = start; j<num; j++){ // 입력값까지 push하기
                    stack[index] = j+1;
                    index++;
                    output.append("+").append("\n");
                }
                start = num;
            }else if(stack[index - 1] != num) { // top인덱스가 입력값과 다르면(pop할 수 없으면) 불가능
                System.out.println("NO");
                setOutput = false;
                break;
            }

            index--; // pop하기
            output.append("-").append("\n");
        }
        if(setOutput){System.out.println(output);}
    }
}
